// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: weather_fetcher/weather_fetcher.proto

package weather_fetcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WeatherFetcher_GetWeather_FullMethodName  = "/weather_fetcher.WeatherFetcher/GetWeather"
	WeatherFetcher_GetLocation_FullMethodName = "/weather_fetcher.WeatherFetcher/GetLocation"
	WeatherFetcher_GetForecast_FullMethodName = "/weather_fetcher.WeatherFetcher/GetForecast"
)

// WeatherFetcherClient is the client API for WeatherFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type WeatherFetcherClient interface {
	GetWeather(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Weather, error)
	GetLocation(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*LocationOptions, error)
	GetForecast(ctx context.Context, in *Location, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Weather], error)
}

type weatherFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherFetcherClient(cc grpc.ClientConnInterface) WeatherFetcherClient {
	return &weatherFetcherClient{cc}
}

func (c *weatherFetcherClient) GetWeather(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Weather, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Weather)
	err := c.cc.Invoke(ctx, WeatherFetcher_GetWeather_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherFetcherClient) GetLocation(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*LocationOptions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocationOptions)
	err := c.cc.Invoke(ctx, WeatherFetcher_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherFetcherClient) GetForecast(ctx context.Context, in *Location, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Weather], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WeatherFetcher_ServiceDesc.Streams[0], WeatherFetcher_GetForecast_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Location, Weather]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeatherFetcher_GetForecastClient = grpc.ServerStreamingClient[Weather]

// WeatherFetcherServer is the server API for WeatherFetcher service.
// All implementations must embed UnimplementedWeatherFetcherServer
// for forward compatibility.
//
// Interface exported by the server.
type WeatherFetcherServer interface {
	GetWeather(context.Context, *Location) (*Weather, error)
	GetLocation(context.Context, *StringValue) (*LocationOptions, error)
	GetForecast(*Location, grpc.ServerStreamingServer[Weather]) error
	mustEmbedUnimplementedWeatherFetcherServer()
}

// UnimplementedWeatherFetcherServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWeatherFetcherServer struct{}

func (UnimplementedWeatherFetcherServer) GetWeather(context.Context, *Location) (*Weather, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeather not implemented")
}
func (UnimplementedWeatherFetcherServer) GetLocation(context.Context, *StringValue) (*LocationOptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedWeatherFetcherServer) GetForecast(*Location, grpc.ServerStreamingServer[Weather]) error {
	return status.Errorf(codes.Unimplemented, "method GetForecast not implemented")
}
func (UnimplementedWeatherFetcherServer) mustEmbedUnimplementedWeatherFetcherServer() {}
func (UnimplementedWeatherFetcherServer) testEmbeddedByValue()                        {}

// UnsafeWeatherFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherFetcherServer will
// result in compilation errors.
type UnsafeWeatherFetcherServer interface {
	mustEmbedUnimplementedWeatherFetcherServer()
}

func RegisterWeatherFetcherServer(s grpc.ServiceRegistrar, srv WeatherFetcherServer) {
	// If the following call pancis, it indicates UnimplementedWeatherFetcherServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WeatherFetcher_ServiceDesc, srv)
}

func _WeatherFetcher_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherFetcherServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherFetcher_GetWeather_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherFetcherServer).GetWeather(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherFetcher_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherFetcherServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherFetcher_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherFetcherServer).GetLocation(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherFetcher_GetForecast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Location)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeatherFetcherServer).GetForecast(m, &grpc.GenericServerStream[Location, Weather]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeatherFetcher_GetForecastServer = grpc.ServerStreamingServer[Weather]

// WeatherFetcher_ServiceDesc is the grpc.ServiceDesc for WeatherFetcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherFetcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weather_fetcher.WeatherFetcher",
	HandlerType: (*WeatherFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeather",
			Handler:    _WeatherFetcher_GetWeather_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _WeatherFetcher_GetLocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetForecast",
			Handler:       _WeatherFetcher_GetForecast_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "weather_fetcher/weather_fetcher.proto",
}
